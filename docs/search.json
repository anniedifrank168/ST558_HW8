[
  {
    "objectID": "HW8_AJD.html",
    "href": "HW8_AJD.html",
    "title": "HW8_AJD",
    "section": "",
    "text": "1. Reading in the data\n\nread_csv(\"SeoulBikeData.csv\",locale=locale(encoding=\"latin1\")) -&gt;bikedata\n\nRows: 8760 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Date, Seasons, Holiday, Functioning Day\ndbl (10): Rented Bike Count, Hour, Temperature(°C), Humidity(%), Wind speed ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n2. EDA\n\n#1. Checking for missingness\nsum(is.na(bikedata))\n\n[1] 0\n\n  #no NAs \n\n#2. Checking the column types and values\nhead(bikedata)\n\n# A tibble: 6 × 14\n  Date       `Rented Bike Count`  Hour `Temperature(°C)` `Humidity(%)`\n  &lt;chr&gt;                    &lt;dbl&gt; &lt;dbl&gt;             &lt;dbl&gt;         &lt;dbl&gt;\n1 01/12/2017                 254     0              -5.2            37\n2 01/12/2017                 204     1              -5.5            38\n3 01/12/2017                 173     2              -6              39\n4 01/12/2017                 107     3              -6.2            40\n5 01/12/2017                  78     4              -6              36\n6 01/12/2017                 100     5              -6.4            37\n# ℹ 9 more variables: `Wind speed (m/s)` &lt;dbl&gt;, `Visibility (10m)` &lt;dbl&gt;,\n#   `Dew point temperature(°C)` &lt;dbl&gt;, `Solar Radiation (MJ/m2)` &lt;dbl&gt;,\n#   `Rainfall(mm)` &lt;dbl&gt;, `Snowfall (cm)` &lt;dbl&gt;, Seasons &lt;chr&gt;, Holiday &lt;chr&gt;,\n#   `Functioning Day` &lt;chr&gt;\n\n#all column types make sense, except the date-\nbikedata$Date &lt;- mdy(bikedata$Date)\n\nWarning: 5304 failed to parse.\n\nsummary(bikedata)\n\n      Date            Rented Bike Count      Hour       Temperature(°C) \n Min.   :2017-01-12   Min.   :   0.0    Min.   : 0.00   Min.   :-17.80  \n 1st Qu.:2018-03-02   1st Qu.: 191.0    1st Qu.: 5.75   1st Qu.:  3.50  \n Median :2018-06-05   Median : 504.5    Median :11.50   Median : 13.70  \n Mean   :2018-05-22   Mean   : 704.6    Mean   :11.50   Mean   : 12.88  \n 3rd Qu.:2018-09-08   3rd Qu.:1065.2    3rd Qu.:17.25   3rd Qu.: 22.50  \n Max.   :2018-12-11   Max.   :3556.0    Max.   :23.00   Max.   : 39.40  \n NA's   :5304                                                           \n  Humidity(%)    Wind speed (m/s) Visibility (10m) Dew point temperature(°C)\n Min.   : 0.00   Min.   :0.000    Min.   :  27     Min.   :-30.600          \n 1st Qu.:42.00   1st Qu.:0.900    1st Qu.: 940     1st Qu.: -4.700          \n Median :57.00   Median :1.500    Median :1698     Median :  5.100          \n Mean   :58.23   Mean   :1.725    Mean   :1437     Mean   :  4.074          \n 3rd Qu.:74.00   3rd Qu.:2.300    3rd Qu.:2000     3rd Qu.: 14.800          \n Max.   :98.00   Max.   :7.400    Max.   :2000     Max.   : 27.200          \n                                                                            \n Solar Radiation (MJ/m2)  Rainfall(mm)     Snowfall (cm)       Seasons         \n Min.   :0.0000          Min.   : 0.0000   Min.   :0.00000   Length:8760       \n 1st Qu.:0.0000          1st Qu.: 0.0000   1st Qu.:0.00000   Class :character  \n Median :0.0100          Median : 0.0000   Median :0.00000   Mode  :character  \n Mean   :0.5691          Mean   : 0.1487   Mean   :0.07507                     \n 3rd Qu.:0.9300          3rd Qu.: 0.0000   3rd Qu.:0.00000                     \n Max.   :3.5200          Max.   :35.0000   Max.   :8.80000                     \n                                                                               \n   Holiday          Functioning Day   \n Length:8760        Length:8760       \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n                                      \n\n#numeric columns are fine, categoricals need converted to factors\nbikedata &lt;- bikedata %&gt;%\n  mutate(across(where(is.character), as.factor))\n\nlapply(bikedata[sapply(bikedata, is.factor)], table)\n\n$Seasons\n\nAutumn Spring Summer Winter \n  2184   2208   2208   2160 \n\n$Holiday\n\n   Holiday No Holiday \n       432       8328 \n\n$`Functioning Day`\n\n  No  Yes \n 295 8465 \n\n#categorical variables look fine\n\n#Renaming columns for ease\nnames(bikedata) &lt;-\n  c(\n    \"date\",\n    \"rental_count\",\n    \"hour\",\n    \"temperature\",\n    \"humidity\",\n    \"wind_speed\",\n    \"visability\",\n    \"dew_pt_temp\",\n    \"solar_radiation\",\n    \"rainfall\",\n    \"snowfall\",\n    \"seasons\",\n    \"holiday\",\n    \"functioning_day\"\n  )\n\n#additional summary statistics\ntable(bikedata$functioning_day)\n\n\n  No  Yes \n 295 8465 \n\ntable(bikedata$holiday)\n\n\n   Holiday No Holiday \n       432       8328 \n\ntable(bikedata$seasons)\n\n\nAutumn Spring Summer Winter \n  2184   2208   2208   2160 \n\nsummary(bikedata$rental_count)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    0.0   191.0   504.5   704.6  1065.2  3556.0 \n\nbikedata %&gt;% group_by(functioning_day, holiday, seasons) %&gt;% summarize(count =\n                                                                         n())\n\n`summarise()` has grouped output by 'functioning_day', 'holiday'. You can\noverride using the `.groups` argument.\n\n\n# A tibble: 11 × 4\n# Groups:   functioning_day, holiday [4]\n   functioning_day holiday    seasons count\n   &lt;fct&gt;           &lt;fct&gt;      &lt;fct&gt;   &lt;int&gt;\n 1 No              Holiday    Autumn     24\n 2 No              No Holiday Autumn    223\n 3 No              No Holiday Spring     48\n 4 Yes             Holiday    Autumn     96\n 5 Yes             Holiday    Spring     72\n 6 Yes             Holiday    Summer     48\n 7 Yes             Holiday    Winter    192\n 8 Yes             No Holiday Autumn   1841\n 9 Yes             No Holiday Spring   2088\n10 Yes             No Holiday Summer   2160\n11 Yes             No Holiday Winter   1968\n\nbikedata %&gt;% group_by(functioning_day, rental_count) %&gt;% summarize()\n\n`summarise()` has grouped output by 'functioning_day'. You can override using\nthe `.groups` argument.\n\n\n# A tibble: 2,166 × 2\n# Groups:   functioning_day [2]\n   functioning_day rental_count\n   &lt;fct&gt;                  &lt;dbl&gt;\n 1 No                         0\n 2 Yes                        2\n 3 Yes                        3\n 4 Yes                        4\n 5 Yes                        5\n 6 Yes                        6\n 7 Yes                        7\n 8 Yes                        8\n 9 Yes                        9\n10 Yes                       10\n# ℹ 2,156 more rows\n\n#filtering dataset on functioning days only\nbikedata &lt;- bikedata %&gt;% filter(functioning_day == \"Yes\")\n\n#summarize across the hours\nbikedata_summary &lt;-\n  bikedata %&gt;% group_by(date, seasons, holiday) %&gt;%\n  summarize(\n    #summing rental count, rainfall, and snowfall\n    total_rental_count = sum(rental_count, na.rm = TRUE),\n    total_rainfall = sum(rainfall, na.rm = TRUE),\n    total_snowfall = sum(snowfall, na.rm = TRUE),\n    \n    #calculate mean for other weather-related variables (temperature, dew_pt_temp, humidity, wind_speed, visability, solar_radiation)\n    avg_temperature = mean(temperature, na.rm = TRUE),\n    avg_humidity = mean(humidity, na.rm = TRUE),\n    avg_wind_speed = mean(wind_speed, na.rm = TRUE),\n    avg_dew_pt_temp = mean(dew_pt_temp, na.rm = TRUE),\n    avg_visability = mean(visability, na.rm = TRUE),\n    avg_solar_radiation = mean(solar_radiation, na.rm = TRUE)\n  ) %&gt;% ungroup()\n\n`summarise()` has grouped output by 'date', 'seasons'. You can override using\nthe `.groups` argument.\n\n#Basic summary stats with new data \nsummary(bikedata_summary)\n\n      date              seasons         holiday    total_rental_count\n Min.   :2017-01-12   Autumn:32   Holiday   :  9   Min.   :   1721   \n 1st Qu.:2018-03-01   Spring:36   No Holiday:135   1st Qu.:   6668   \n Median :2018-06-04   Summer:38                    Median :  18824   \n Mean   :2018-05-20   Winter:38                    Mean   :  42863   \n 3rd Qu.:2018-09-06                                3rd Qu.:  27670   \n Max.   :2018-12-11                                Max.   :1372602   \n NA's   :8                                                           \n total_rainfall    total_snowfall    avg_temperature    avg_humidity  \n Min.   :  0.000   Min.   :  0.000   Min.   :-10.767   Min.   :32.42  \n 1st Qu.:  0.000   1st Qu.:  0.000   1st Qu.:  1.167   1st Qu.:48.64  \n Median :  0.000   Median :  0.000   Median : 14.029   Median :56.92  \n Mean   :  8.766   Mean   :  4.567   Mean   : 12.433   Mean   :58.67  \n 3rd Qu.:  1.625   3rd Qu.:  0.000   3rd Qu.: 22.899   3rd Qu.:68.67  \n Max.   :359.100   Max.   :411.700   Max.   : 33.742   Max.   :95.42  \n                                                                      \n avg_wind_speed   avg_dew_pt_temp   avg_visability avg_solar_radiation\n Min.   :0.6625   Min.   :-23.171   Min.   : 425   Min.   :0.03583    \n 1st Qu.:1.3781   1st Qu.: -6.747   1st Qu.:1206   1st Qu.:0.28635    \n Median :1.6646   Median :  5.835   Median :1656   Median :0.56604    \n Mean   :1.7963   Mean   :  3.829   Mean   :1524   Mean   :0.56739    \n 3rd Qu.:2.0115   3rd Qu.: 14.293   3rd Qu.:1873   3rd Qu.:0.79844    \n Max.   :4.0000   Max.   : 24.746   Max.   :2000   Max.   :1.18708    \n                                                                      \n\nsum(is.na(bikedata_summary))\n\n[1] 8\n\n #get rid of the na's \nbikedata_summary&lt;- bikedata_summary%&gt;% drop_na()\n\n  #correlation matrix between the numeric variables \nbike_numeric &lt;- bikedata_summary[sapply(bikedata_summary, is.numeric)]\ncor(bike_numeric)\n\n                    total_rental_count total_rainfall total_snowfall\ntotal_rental_count          1.00000000    -0.26549447    -0.23345268\ntotal_rainfall             -0.26549447     1.00000000    -0.03804521\ntotal_snowfall             -0.23345268    -0.03804521     1.00000000\navg_temperature             0.75382995     0.14799433    -0.22655048\navg_humidity                0.05112332     0.57453899     0.01549185\navg_wind_speed             -0.17839585    -0.20158954     0.05643704\navg_dew_pt_temp             0.65759301     0.27004101    -0.18760872\navg_visability              0.20538265    -0.26820940    -0.06343183\navg_solar_radiation         0.72928152    -0.35054079    -0.22893017\n                    avg_temperature avg_humidity avg_wind_speed avg_dew_pt_temp\ntotal_rental_count       0.75382995   0.05112332    -0.17839585       0.6575930\ntotal_rainfall           0.14799433   0.57453899    -0.20158954       0.2700410\ntotal_snowfall          -0.22655048   0.01549185     0.05643704      -0.1876087\navg_temperature          1.00000000   0.45229812    -0.29985301       0.9710401\navg_humidity             0.45229812   1.00000000    -0.28954404       0.6496518\navg_wind_speed          -0.29985301  -0.28954404     1.00000000      -0.3302561\navg_dew_pt_temp          0.97104007   0.64965182    -0.33025606       1.0000000\navg_visability          -0.02037341  -0.60794720     0.16080807      -0.1706888\navg_solar_radiation      0.52271223  -0.28728579     0.13926858       0.3643206\n                    avg_visability avg_solar_radiation\ntotal_rental_count      0.20538265           0.7292815\ntotal_rainfall         -0.26820940          -0.3505408\ntotal_snowfall         -0.06343183          -0.2289302\navg_temperature        -0.02037341           0.5227122\navg_humidity           -0.60794720          -0.2872858\navg_wind_speed          0.16080807           0.1392686\navg_dew_pt_temp        -0.17068875           0.3643206\navg_visability          1.00000000           0.3488258\navg_solar_radiation     0.34882576           1.0000000\n\n\nThere are some obvious/expected correlations just due to this being a lot of weather data, such as a positive correlation between humidity and rainfall. Something I think is interesting is the positive correlation between dew pt. and total rental count (I hate a humid day) but again that’s probably just because, as we see, dew pt. has almost a completely positive correlation with temperature (0.97)\n\ncategorical_vars &lt;- c(\"seasons\",\"holiday\")\nnumeric_vars &lt;- names(bike_numeric)\n\n#Loop through each categorical variable to create a plot\nfor (cat_var in categorical_vars) {\n  long_data&lt;- bikedata_summary %&gt;%\n    select(all_of(c(cat_var,numeric_vars))) %&gt;% \n    pivot_longer(cols = all_of(numeric_vars), names_to = \"numeric_variable\", values_to = \"value\")\n\n  #plot\n  plot &lt;- ggplot(long_data, aes_string(x = cat_var, y = \"value\")) +\n    geom_boxplot() +\n    facet_wrap(~ numeric_variable, scales = \"free_y\") +\n    labs(\n      title = paste(\"Relationship Between\", cat_var, \"and Numeric Variables\"),\n      x = cat_var,\n      y = \"Value\"\n    ) +\n    theme_minimal()\n  \n  # Print the plot\n  print(plot)\n}\n\nWarning: `aes_string()` was deprecated in ggplot2 3.0.0.\nℹ Please use tidy evaluation idioms with `aes()`.\nℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n\n\n\n\n\n\n\nThe relationship between snow and rainfall and whether it’s a holiday or not is weird! Other than that, there isn’t anything way out of the ordinary.\n\n#Looking at how total rent count relates to the other variables \n  \n  #with numeric variables using GGally package \nggpairs(bike_numeric, title = \"Scatterplot Matrix: Total Rental Count and Numeric Variables\",\n        #first time I printed everything was way too big for screen \n        lower = list(continuous = wrap(\"points\", size = 0.5, alpha = 0.3)), #adjust point size for each scatter plot \n        upper = list(continuous = wrap(\"cor\", size = 3)) #adjust size of the corr. statistics in each box \n) + theme(\n   axis.text = element_text(size = 6), #smaller axis labels \n   strip.text = element_text(size = 6) #smaller facet labels \n )\n\n\n\n  #with categorical variables \nfor (cat_var in categorical_vars) {\n  #boxplot for each categorical variable\n  plot &lt;- ggplot(bikedata_summary, aes_string(x = cat_var, y = \"total_rental_count\")) +\n    geom_boxplot() +\n    labs(\n      title = paste(\"Total Rental Count by\", cat_var),\n      x = cat_var,\n      y = \"Total Rental Count\"\n    ) +\n    theme_minimal()\n  \n  #print the plot\n  print(plot)\n}\n\n\n\n\n\n\n\nThese both makes logistical sense.\n\n\n3. Splitting the data\n\n#split the data into training (75%) and testing (25%) sets, stratified by 'seasons'\nset.seed(123)  # Set a seed for reproducibility\nbike_split &lt;- initial_split(bikedata_summary, prop = 0.75, strata = seasons)\n\n#extract the training and testing sets\ntrain_data &lt;- training(bike_split)\ntest_data &lt;- testing(bike_split)\n\n#on the training data, create a 10-fold CV split \ncv_split &lt;- vfold_cv(train_data, v = 10, strata = seasons)\n\n#checking the structure of the cross-validation splits\ncv_split\n\n#  10-fold cross-validation using stratification \n# A tibble: 10 × 2\n   splits          id    \n   &lt;list&gt;          &lt;chr&gt; \n 1 &lt;split [89/12]&gt; Fold01\n 2 &lt;split [89/12]&gt; Fold02\n 3 &lt;split [90/11]&gt; Fold03\n 4 &lt;split [90/11]&gt; Fold04\n 5 &lt;split [90/11]&gt; Fold05\n 6 &lt;split [91/10]&gt; Fold06\n 7 &lt;split [91/10]&gt; Fold07\n 8 &lt;split [93/8]&gt;  Fold08\n 9 &lt;split [93/8]&gt;  Fold09\n10 &lt;split [93/8]&gt;  Fold10\n\n\n\n\n4. Fitting three different models\n\nHere, we will also fit the models using 10-fold cross-validation to determine the best model.\n\n\n#Recipe #1 ---------------\n\n  #fixing the date column\nbike_1_recipe &lt;- recipe(total_rental_count ~ ., data = bikedata_summary) %&gt;%\n  #extract the day of the week from the date variable\n  step_date(date, features = \"dow\", label = TRUE) %&gt;%\n  #create a new factor variable 'weekday_weekend'\n  step_mutate(\n    weekday_weekend = factor(if_else(date_dow %in% c(\"Sat\", \"Sun\"), \"Weekend\", \"Weekday\"))\n  ) %&gt;%\n  #remove the intermediate 'dow' variable and the original 'date' variable\n  step_rm(date_dow, date) %&gt;% \n  #standardize numeric vars \n  step_normalize(all_numeric()) %&gt;% \n  #dummy variables \n  step_dummy(all_nominal_predictors())\n\n#prepare and bake the recipe\nfirst_recipe&lt;- prep(bike_1_recipe)\nbike_1_recipe\n\n\n\n\n── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n\n\n\n── Inputs \n\n\nNumber of variables by role\n\n\noutcome:    1\npredictor: 11\n\n\n\n\n\n── Operations \n\n\n• Date features from: date\n\n\n• Variable mutation for: factor(if_else(date_dow %in% c(\"Sat\", \"Sun\"),\n  \"Weekend\", \"Weekday\"))\n\n\n• Variables removed: date_dow and date\n\n\n• Centering and scaling for: all_numeric()\n\n\n• Dummy variables from: all_nominal_predictors()\n\nbake(first_recipe, bikedata_summary)\n\n# A tibble: 136 × 14\n   total_rainfall total_snowfall avg_temperature avg_humidity avg_wind_speed\n            &lt;dbl&gt;          &lt;dbl&gt;           &lt;dbl&gt;        &lt;dbl&gt;          &lt;dbl&gt;\n 1        -0.328          -0.199          -1.21        -0.885        -0.400 \n 2        -0.328          -0.199          -0.897        0.216        -0.143 \n 3         0.0249         -0.199          -0.607        1.56         -0.290 \n 4        -0.319          -0.199          -1.03        -0.431         2.42  \n 5        -0.328          -0.199          -1.37        -1.53         -1.03  \n 6        -0.213           2.11           -1.00         0.821        -1.64  \n 7        -0.328           2.59           -0.916        0.599        -0.173 \n 8        -0.328          -0.199          -1.32        -1.17          0.0597\n 9        -0.328          -0.199          -1.07        -0.877        -1.08  \n10         0.0337          8.51           -0.908        0.747         0.287 \n# ℹ 126 more rows\n# ℹ 9 more variables: avg_dew_pt_temp &lt;dbl&gt;, avg_visability &lt;dbl&gt;,\n#   avg_solar_radiation &lt;dbl&gt;, total_rental_count &lt;dbl&gt;, seasons_Spring &lt;dbl&gt;,\n#   seasons_Summer &lt;dbl&gt;, seasons_Winter &lt;dbl&gt;, holiday_No.Holiday &lt;dbl&gt;,\n#   weekday_weekend_Weekend &lt;dbl&gt;\n\n#Recipe #2 ---------------\n\nbike_2_recipe &lt;- recipe(total_rental_count ~ ., data = bikedata_summary) %&gt;%\n  step_date(date, features = \"dow\", label = TRUE) %&gt;%\n  step_mutate(\n    weekday_weekend = factor(if_else(date_dow %in% c(\"Sat\", \"Sun\"), \"Weekend\", \"Weekday\"))\n  ) %&gt;%\n  step_rm(date_dow, date) %&gt;% \n  step_normalize(all_numeric()) %&gt;% \n  \n  ######add interaction terms \n  step_interact(~starts_with(\"seasons\"):holiday) %&gt;% \n  step_interact(~starts_with(\"seasons\"):avg_temperature) %&gt;% \n  step_interact(~avg_temperature:total_rainfall) %&gt;% \n\n  #dummy variables \n  step_dummy(all_nominal_predictors())\n\nprep(bike_2_recipe)\n\n\n\n\n── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n\n\n\n── Inputs \n\n\nNumber of variables by role\n\n\noutcome:    1\npredictor: 11\n\n\n\n\n\n── Training information \n\n\nTraining data contained 136 data points and no incomplete rows.\n\n\n\n\n\n── Operations \n\n\n• Date features from: date | Trained\n\n\n• Variable mutation for: ~factor(if_else(date_dow %in% c(\"Sat\", \"Sun\"),\n  \"Weekend\", \"Weekday\")) | Trained\n\n\n• Variables removed: date_dow and date | Trained\n\n\n• Centering and scaling for: total_rainfall and total_snowfall, ... | Trained\n\n\n• Interactions with: seasons:holiday | Trained\n\n\n• Interactions with: (seasons + `seasonsSpring_x_holidayNo Holiday` +\n  `seasonsSummer_x_holidayNo Holiday` + `seasonsWinter_x_holidayNo\n  Holiday`):avg_temperature | Trained\n\n\n• Interactions with: avg_temperature:total_rainfall | Trained\n\n\n• Dummy variables from: seasons, holiday, weekday_weekend | Trained\n\n#Recipe #3 ---------------\n\nbike_3_recipe &lt;- recipe(total_rental_count ~ ., data = bikedata_summary) %&gt;%\n  step_date(date, features = \"dow\", label = TRUE) %&gt;%\n  step_mutate(\n    weekday_weekend = factor(if_else(date_dow %in% c(\"Sat\", \"Sun\"), \"Weekend\", \"Weekday\"))\n  ) %&gt;%\n  step_rm(date_dow, date) %&gt;% \n  step_normalize(all_numeric()) %&gt;% \n\n  step_interact(~starts_with(\"seasons\"):holiday) %&gt;% \n  step_interact(~starts_with(\"seasons\"):avg_temperature) %&gt;% \n  step_interact(~avg_temperature:total_rainfall) %&gt;% \n  \n  ######add quadratic terms for each numeric predictor \n  step_poly(all_numeric_predictors(), degree = 2, options = list(raw = TRUE)) %&gt;% \n  \n  #dummy variables \n  step_dummy(all_nominal_predictors())\n\nprep(bike_3_recipe)\n\n\n\n\n── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n\n\n\n── Inputs \n\n\nNumber of variables by role\n\n\noutcome:    1\npredictor: 11\n\n\n\n\n\n── Training information \n\n\nTraining data contained 136 data points and no incomplete rows.\n\n\n\n\n\n── Operations \n\n\n• Date features from: date | Trained\n\n\n• Variable mutation for: ~factor(if_else(date_dow %in% c(\"Sat\", \"Sun\"),\n  \"Weekend\", \"Weekday\")) | Trained\n\n\n• Variables removed: date_dow and date | Trained\n\n\n• Centering and scaling for: total_rainfall and total_snowfall, ... | Trained\n\n\n• Interactions with: seasons:holiday | Trained\n\n\n• Interactions with: (seasons + `seasonsSpring_x_holidayNo Holiday` +\n  `seasonsSummer_x_holidayNo Holiday` + `seasonsWinter_x_holidayNo\n  Holiday`):avg_temperature | Trained\n\n\n• Interactions with: avg_temperature:total_rainfall | Trained\n\n\n• Orthogonal polynomials on: total_rainfall and total_snowfall, ... | Trained\n\n\n• Dummy variables from: seasons, holiday, weekday_weekend | Trained\n\n#Set up linear model fit to use the 'lm' engine \nrecipe_model&lt;- linear_reg() %&gt;% \n  set_engine(\"lm\")\n\n#create recipe workflows   \nrecipe_1_wfl &lt;- workflow() %&gt;% \n  add_recipe(bike_1_recipe) %&gt;% \n  add_model(recipe_model)\nrecipe_1_wfl\n\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n5 Recipe Steps\n\n• step_date()\n• step_mutate()\n• step_rm()\n• step_normalize()\n• step_dummy()\n\n── Model ───────────────────────────────────────────────────────────────────────\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n\nrecipe_2_wfl &lt;- workflow() %&gt;% \n  add_recipe(bike_2_recipe) %&gt;% \n  add_model(recipe_model)\nrecipe_2_wfl\n\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n8 Recipe Steps\n\n• step_date()\n• step_mutate()\n• step_rm()\n• step_normalize()\n• step_interact()\n• step_interact()\n• step_interact()\n• step_dummy()\n\n── Model ───────────────────────────────────────────────────────────────────────\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n\nrecipe_3_wfl &lt;- workflow() %&gt;% \n  add_recipe(bike_3_recipe) %&gt;% \n  add_model(recipe_model)\nrecipe_3_wfl\n\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n9 Recipe Steps\n\n• step_date()\n• step_mutate()\n• step_rm()\n• step_normalize()\n• step_interact()\n• step_interact()\n• step_interact()\n• step_poly()\n• step_dummy()\n\n── Model ───────────────────────────────────────────────────────────────────────\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n\n#Fit the models using 10 fold CV via fit_resamples() \nrec_10_fold &lt;- vfold_cv(train_data, 10)\n  \nrec1_fits &lt;- recipe_1_wfl %&gt;% \n  fit_resamples(rec_10_fold)\n  \nrec2_fits &lt;- recipe_2_wfl %&gt;% \n  fit_resamples(rec_10_fold) \n\n→ A | warning: prediction from rank-deficient fit; consider predict(., rankdeficient=\"NA\")\n\n\nThere were issues with some computations   A: x1\n\n\nThere were issues with some computations   A: x10\n\n\n\n\nrec3_fits &lt;- recipe_3_wfl %&gt;% \n  fit_resamples(rec_10_fold)\n\n→ A | warning: prediction from rank-deficient fit; consider predict(., rankdeficient=\"NA\")\n\n#collect metrics of the three models \nrbind(\n  rec1_fits %&gt;% collect_metrics(),\n  rec2_fits %&gt;% collect_metrics(),\n  rec3_fits %&gt;% collect_metrics())\n\n# A tibble: 6 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   0.470    10  0.0379 Preprocessor1_Model1\n2 rsq     standard   0.786    10  0.0429 Preprocessor1_Model1\n3 rmse    standard   0.348    10  0.0578 Preprocessor1_Model1\n4 rsq     standard   0.868    10  0.0574 Preprocessor1_Model1\n5 rmse    standard   0.987    10  0.591  Preprocessor1_Model1\n6 rsq     standard   0.759    10  0.0912 Preprocessor1_Model1\n\n\nLooking at the metrics of the three models, the best model is model 2 with the lowest rmse and highest value of R-squared.\n\n\n5. Fitting the best model\n\nHere, we will fit the best model to the entire training data set\n\nwe will additionally compute the RMSE metric on the test set and obtain the model (fit on the entire training set) coefficient table\n\n\n\n#fitting on the training set \nfinal_fit &lt;- recipe_2_wfl %&gt;% last_fit(split = bike_split)\n\n→ A | warning: prediction from rank-deficient fit; consider predict(., rankdeficient=\"NA\")\n\n#finding test set metrics\nfinal_fit %&gt;% collect_metrics()\n\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard       0.301 Preprocessor1_Model1\n2 rsq     standard       0.911 Preprocessor1_Model1\n\n#obtaining the final model fit \nfinal_model &lt;- final_fit %&gt;% extract_fit_parsnip()\n\n#tidy table of coefficients \ntidy(final_model)\n\n# A tibble: 24 × 5\n   term                                estimate std.error statistic    p.value\n   &lt;chr&gt;                                  &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n 1 (Intercept)                          0.731      0.347      2.11  0.0380    \n 2 total_rainfall                      -0.325      0.0820    -3.96  0.000160  \n 3 total_snowfall                      -0.00857    0.0367    -0.233 0.816     \n 4 avg_temperature                     -1.57       0.966     -1.62  0.109     \n 5 avg_humidity                        -0.586      0.336     -1.75  0.0847    \n 6 avg_wind_speed                      -0.0361     0.0413    -0.875 0.384     \n 7 avg_dew_pt_temp                      2.18       1.10       1.99  0.0502    \n 8 avg_visability                       0.0786     0.0550     1.43  0.157     \n 9 avg_solar_radiation                  0.373      0.0714     5.23  0.00000131\n10 `seasonsSpring_x_holidayNo Holiday` -0.404      0.116     -3.47  0.000829  \n# ℹ 14 more rows\n\n\n\n\nConclusions:\nThe RMSE metric of the test set is 0.301. The R-squared value is 0.91, meaning the model explains 91% of the variance in the total_rental_count. The coefficient table shows each coefficient/estimate for the predictors in the model."
  }
]